
import { Injectable } from "@angular/core";
import { Client, StompSubscription } from '@stomp/stompjs';
import { reviewModel } from "../models/reviews.model";
import { reviewReplies } from "../models/ReviewReplies.model";
import { BehaviorSubject, catchError, filter, map, Observable, of, switchMap, tap } from "rxjs";
import * as SockJS from 'sockjs-client';
import { HttpClient } from "@angular/common/http";
import { AuthServiceComponent } from "../core/services/auth-service.component";
@Injectable({
    providedIn: "root"
})
export class WebSocketService {
    private stompClient!: Client;
    private reviewSubscription: StompSubscription | null = null;
    private replySubscription: StompSubscription | null = null;
    private tokenSubscription: StompSubscription | null = null;
    private pendingMessages: any[] = []; // L∆∞u tr·ªØ y√™u c·∫ßu WebSocket ch∆∞a g·ª≠i
    private reviewSubject = new BehaviorSubject<reviewModel | null>(null);
    private replySubject = new BehaviorSubject<reviewReplies[]>([]);
    cdr: any;

    constructor(private http: HttpClient, private auth: AuthServiceComponent) {

        this.initWebSocket();
    }

    private async initWebSocket() {
        if (this.stompClient && this.stompClient.active) {
            console.log("üî¥ ƒê√≥ng k·∫øt n·ªëi c≈© tr∆∞·ªõc khi m·ªü k·∫øt n·ªëi m·ªõi...");
            await this.stompClient.deactivate(); // ƒê√≥ng k·∫øt n·ªëi c≈©
        }

        const token = localStorage.getItem('accessToken');
        const refreshToken = localStorage.getItem('refreshToken')
        const { Client } = await import("@stomp/stompjs");
        const { default: SockJS } = await import("sockjs-client");

        const socket = new SockJS("http://localhost:8080/ws");
        this.stompClient = new Client({
            webSocketFactory: () => socket as any,
            debug: (msg) => console.log(msg),
            reconnectDelay: 40000,
            heartbeatIncoming: 4000,
            heartbeatOutgoing: 4000,
            connectHeaders: {
                Authorization: `Bearer ${token}`,  // Th√™m token v√†o headers
                'Authorization-Refresh': localStorage.getItem('refreshToken') || ''
            }
        });

        this.stompClient.onConnect = () => {
            console.log("Connected to WebSocket via SockJS");
        };

        this.stompClient.onStompError = (frame) => {
            console.error("Broker reported error: " + frame.headers["message"]);
            console.error("Additional details: " + frame.body);
        };
        console.log("k√™ÃÅt n√¥ÃÅi websocket thaÃÄnh c√¥ng");
        this.stompClient.activate();
    }
    private retryPendingMessages(token: string) {
        while (this.pendingMessages.length > 0) {
            const review = this.pendingMessages.shift();
            this.sendReview(review); // G·ª≠i l·∫°i y√™u c·∫ßu b·ªã ch·∫∑n
        }
    }
    private refreshTokenAndRetry(): Observable<boolean> {
        return this.auth.refreshToken().pipe(
            tap((response) => {
                if (response && response.accessToken) {
                    console.log("Token m·ªõi ƒë√£ ƒë∆∞·ª£c l·∫•y");
                    localStorage.setItem('accessToken', response.accessToken);
                    localStorage.setItem('Authorization-Refresh', response.refreshToken)
                    this.retryPendingMessages(response.accessToken); // G·ª≠i l·∫°i c√°c tin nh·∫Øn ch·ªù
                } else {
                    console.error("Kh√¥ng th·ªÉ l√†m m·ªõi token: Response kh√¥ng h·ª£p l·ªá");
                }
            }),
            map(response => !!response && !!response.accessToken), // Tr·∫£ v·ªÅ true n·∫øu refresh th√†nh c√¥ng
            catchError((error) => {
                console.error("Kh√¥ng th·ªÉ l√†m m·ªõi token:", error);
                return of(false);
            })
        );
    }
    // ch∆°ÃÄ ƒë∆°Ã£i sau khi websocket k√™ÃÅt n√¥ÃÅi xong
    async subscribeReviewsToDoctor(doctorId: number) {
        await this.ensureWebSocketConnected();

        if (!this.stompClient || !this.stompClient.connected) {
            console.error("WebSocket client (stompClient) ch∆∞a s·∫µn s√†ng!");
            return;
        }

        if (this.reviewSubscription) {
            this.reviewSubscription.unsubscribe();
        }

        const channel = `/topic/profile/${doctorId}`;
        console.log(`ƒêƒÉng k√Ω nh·∫≠n review t·ª´ WebSocket: ${channel}`);

        this.reviewSubscription = this.stompClient.subscribe(channel, message => {
            const newReview: reviewModel = JSON.parse(message.body);
            console.log("D∆∞ÃÉ li√™Ã£u ƒë∆∞∆°Ã£c nh√¢Ã£n ƒë∆∞∆°Ã£c sau ƒëƒÉng kiÃÅ laÃÄ: " + newReview);
            this.reviewSubject.next(newReview);
            console.log(newReview)
        });
    }

    private ensureWebSocketConnected(): Promise<void> {
        return new Promise((resolve) => {
            if (this.stompClient && this.stompClient.connected) {
                resolve();
            } else {
                console.log("Ch·ªù WebSocket k·∫øt n·ªëi...");
                const interval = setInterval(() => {
                    if (this.stompClient && this.stompClient.connected) {
                        clearInterval(interval);
                        resolve();
                    }
                }, 500);
            }
        });
    }
    // subscribeReviewsToDoctor(doctorId: number, reviews: reviewModel[]) {
    //     if (!this.stompClient) {
    //         console.error("WebSocket client (stompClient) ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o!");
    //         return;
    //     }
    //     console.log("GoÃ£i t∆°ÃÅi ƒë√¢y")
    //     if (this.reviewSubscription) {
    //         this.reviewSubscription.unsubscribe();
    //     }
    //     console.log("ƒêƒÉng kiÃÅ nh√¢Ã£n review")
    //     const channel = `/topic/profile/${doctorId}`;
    //     console.log(`ƒêƒÉng k√Ω nh·∫≠n review t·ª´ WebSocket: ${channel}`);
    //     this.reviewSubscription = this.stompClient.subscribe(channel, message => {
    //         const newReview: reviewModel = JSON.parse(message.body);
    //         reviews.unshift(newReview);
    //         console.log("nh√¢Ã£n ƒë∆∞∆°Ã£c review m∆°ÃÅi: " + newReview)
    //     });
    // }

    // subscribeRepliesToDoctor(doctorId: number) {
    //     if (this.replySubscription) {
    //         this.replySubscription?.unsubscribe();
    //     }

    //     const channel = `/topic/profile/${doctorId}/replies`;
    //     this.replySubscription = this.stompClient.subscribe(channel, message => {
    //         const newReply: reviewReplies = JSON.parse(message.body);
    //         this.replySubject.next([...this.replySubject.value, newReply]);
    //     });
    // }
    sendReview(review: reviewModel): Observable<any> {
        const token = localStorage.getItem('accessToken');
        const refreshToken = localStorage.getItem('refreshToken')
        console.log("fontend goÃ£i th√™m review")
        return new Observable(observer => {
            this.stompClient.publish({
                destination: '/app/user/review/add',
                body: JSON.stringify(review),
                headers: {
                    Authorization: `Bearer ${token}`,
                }
            });

            // L·∫Øng nghe ph·∫£n h·ªìi t·ª´ server tr√™n `/topic/reviewer/{userId}`
            const subscription = this.stompClient.subscribe(`/topic/reviewer/${review.appointment?.appointmentId}`, (message) => {
                const response = JSON.parse(message.body);
                console.log("üìå Nh·∫≠n ph·∫£n h·ªìi t·ª´ WebSocket:", response);
                observer.next(response);  // Tr·∫£ v·ªÅ d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c
                observer.complete();  // K·∫øt th√∫c observable
            });

            // H·ªßy subscribe n·∫øu kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi
            return () => subscription.unsubscribe();
        });
    }
    // ƒëƒÉng kiÃÅ lƒÉÃÅng nghe phaÃân h√¥ÃÄi t∆∞ÃÄ server ƒë√™Ãâ x∆∞Ãâ lyÃÅ
    async listenStatusOfToekn() {
        // ƒë∆°Ã£i cho websocket k√™ÃÅt n√¥ÃÅi thaÃÄnh c√¥ng
        await this.ensureWebSocketConnected();
        // ƒëƒÉng kiÃÅ nh√¢Ã£n subscribe
        if (!this.stompClient || !this.stompClient.connected) {
            console.error("WebSocket client (stompClient) ch∆∞a s·∫µn s√†ng!");
            return;
        }

        if (this.reviewSubscription) {
            this.reviewSubscription.unsubscribe();
        }
        var channel = "/topic/queue/errors";
        this.tokenSubscription = this.stompClient.subscribe(channel, (message) => {
            const errorResponse = JSON.parse(message.body);

            if (errorResponse.status === 401) {
                console.log("Token h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá. ƒêƒÉng xu·∫•t...");

                //  this.logout(); // X·ª≠ l√Ω ƒëƒÉng xu·∫•t
            } else if (errorResponse.status === 403) {
                console.log("Token c·∫ßn l√†m m·ªõi. ƒêang g·ªçi API refresh...");
                this.refreshTokenAndRetry();
            }
        });
    }

    getReview(): Observable<reviewModel> {
        return this.reviewSubject.asObservable().pipe(filter(review => review !== null)) as Observable<reviewModel>;
    }
    getReplies(): Observable<reviewReplies[]> {
        return this.replySubject.asObservable();
    }
    disconnect() {
        if (this.stompClient) {
            this.stompClient.deactivate();
        }
    }
}

